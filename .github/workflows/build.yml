---
name: Build and Test

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Formatting
        run: find src include test -iregex '.*\.\(c\|h\|cpp\|hpp\|cc\|hh\|cxx\|hxx\)$' | xargs clang-format -n -Werror
  build-linux:
    runs-on: ubuntu-latest
    env:
      TARGET: x86_64-linux
      CMAKE_GENERATOR: Ninja
      CMAKE_BUILD_TYPE: Debug
      BUILD_DIR: build-x86_64-linux-debug
      BUILD_LIBS_DIR: build-x86_64-linux-libs-debug
    steps:
      - uses: actions/checkout@v3
      - name: Install compiler tools
        run: |
          sudo apt-get -qy update
          sudo apt-get -qy install cmake ninja-build
      - name: Build without getlibs
        run: |
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          cmake -S . -B "$BUILD_DIR" -DUBSAN=ON
          cmake --build "$BUILD_DIR" --config $CMAKE_BUILD_TYPE
          (cd "$BUILD_DIR" && ctest -C $CMAKE_BUILD_TYPE --output-on-failure)
      - name: Get dependencies
        run: |
          CMAKE_BUILD_TYPE=Release ./getlibs.sh $TARGET
      - name: Build with getlibs
        run: |
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          cmake -S . -B "$BUILD_LIBS_DIR" -DCMAKE_PREFIX_PATH="$PWD/local/$TARGET" -DUBSAN=ON -DFIND_FATAL=ON
          cmake --build "$BUILD_LIBS_DIR" --config $CMAKE_BUILD_TYPE
          (cd "$BUILD_LIBS_DIR" && ctest -C $CMAKE_BUILD_TYPE --output-on-failure)
  build-win:
    runs-on: ubuntu-latest
    env:
      TARGET: x86_64-w64-mingw32
      WINARCH: win64
      CMAKE_GENERATOR: Ninja
      CMAKE_BUILD_TYPE: Debug
      CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}/cmake/toolchain/x86_64-w64-mingw32.cmake
      BUILD_DIR: build-x86_64-w64-mingw32-debug
      BUILD_LIBS_DIR: build-x86_64-w64-mingw32-libs-debug
    steps:
      - uses: actions/checkout@v3
      - name: Install cross-compiler tools
        run: |
          sudo apt-get -qy update
          sudo apt-get -qy install cmake ninja-build g++-mingw-w64-x86-64 mingw-w64-x86-64-dev mingw-w64-tools wine wine-binfmt
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      - name: Build without getlibs
        run: |
          export WINEPATH=$("$PWD/winepath-for" $TARGET)
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          cmake -S . -B "$BUILD_DIR"
          cmake --build "$BUILD_DIR" --config $CMAKE_BUILD_TYPE
          (cd "$BUILD_DIR" && ctest -C $CMAKE_BUILD_TYPE --output-on-failure)
      - name: Get dependencies
        run: |
          CMAKE_BUILD_TYPE=Release ./getlibs.sh $TARGET
      - name: Build with getlibs
        run: |
          export WINEPATH=$("$PWD/winepath-for" $TARGET)
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          cmake -S . -B "$BUILD_LIBS_DIR" -DCMAKE_PREFIX_PATH="$PWD/local/$TARGET" -DFIND_FATAL=ON
          cmake --build "$BUILD_LIBS_DIR" --config $CMAKE_BUILD_TYPE
          (cd "$BUILD_LIBS_DIR" && ctest -C $CMAKE_BUILD_TYPE --output-on-failure)
  build-macos:
    runs-on: macos-latest
    env:
      TARGET: x86_64-darwin
      CMAKE_GENERATOR: Ninja
      CMAKE_BUILD_TYPE: Debug
      BUILD_DIR: build-x86_64-darwin-debug
      BUILD_LIBS_DIR: build-x86_64-darwin-libs-debug
    steps:
      - uses: actions/checkout@v3
      - name: Install Ninja
        run: |
          brew install ninja
      - name: Build without getlibs
        run: |
          export CMAKE_BUILD_PARALLEL_LEVEL=$(sysctl -n hw.ncpu)
          cmake -S . -B "$BUILD_DIR"
          cmake --build "$BUILD_DIR" --config $CMAKE_BUILD_TYPE
          (cd "$BUILD_DIR" && ctest -C $CMAKE_BUILD_TYPE --output-on-failure)
      - name: Get dependencies
        run: |
          CMAKE_BUILD_TYPE=Release ./getlibs.sh $TARGET
      - name: Build with getlibs
        run: |
          export CMAKE_BUILD_PARALLEL_LEVEL=$(sysctl -n hw.ncpu)
          cmake -S . -B "$BUILD_LIBS_DIR" -DCMAKE_PREFIX_PATH="$PWD/local/x86_64-darwin" -DFIND_FATAL=ON
          cmake --build "$BUILD_LIBS_DIR" --config $CMAKE_BUILD_TYPE
          (cd "$BUILD_LIBS_DIR" && ctest -C $CMAKE_BUILD_TYPE --output-on-failure)
  build-windows:
    runs-on: windows-latest
    env:
      CMAKE_TOOLCHAIN_FILE: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
      CMAKE_BUILD_TYPE: Debug
      STATIC: ON
      CTEST_OUTPUT_ON_FAILURE: 1
      BUILD_DIR: build-x86_64-windows-debug
      BUILD_LIBS_DIR: build-x86_64-windows-libs-debug
    steps:
      - uses: actions/checkout@v3
      - name: Build without getlibs
        run: |
          echo "Building"
          cmake -S . -B build-x86_64-windows
          cmake --build build-x86_64-windows --config Debug
          echo "Testing"          
          cd build-x86_64-windows
          ctest -C Debug --timeout 20
      - name: Get dependencies
        run: |
          vcpkg integrate install
          vcpkg install doctest --triplet x64-windows
          bash CMAKE_BUILD_TYPE=Release ./getlibs.sh x86_64-w64-mingw32
      - name: Build with getlibs
        run: |
          echo "Building"
          cmake -S . -B build-x86_64-windows-libs-debug -DCMAKE_PREFIX_PATH=${{ github.workspace }}/local/x86_64-w64-mingw32
          cmake --build build-x86_64-windows-libs-debug --config Debug
          echo "Testing"
          cd build-x86_64-windows-libs-debug
          ctest -C Debug --timeout 20
